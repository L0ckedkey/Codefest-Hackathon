service: () -> {
    addCartQuantity: (record {userId:principal; cartId:principal}) -> (variant {Ok:opt record {id:principal; userId:principal; quantity:int64; musicId:principal}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    addCartQuantityByValue: (record {userId:principal; quantity:int64; cartId:principal}) -> (variant {Ok:opt record {id:principal; userId:principal; quantity:int64; musicId:principal}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    addToCart: (record {userId:principal; musicId:principal}) -> (variant {Ok:record {id:principal; userId:principal; quantity:int64; musicId:principal}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    createGenre: (record {name:text}) -> (record {id:principal; name:text});
    createMusic: (record {authorId:principal; name:text; description:text; imageUrl:text; genres:vec text; supply:int64; price:int64}) -> (variant {Ok:record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; username:text; imageUrl:text}; imageUrl:text; genres:vec text; supply:int64; price:int64}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    createUser: (record {username:text; password:text}) -> (record {id:principal; username:text; password:text; imageUrl:text});
    getCartById: (principal) -> (opt record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; username:text; imageUrl:text}; imageUrl:text; genres:vec text; supply:int64; price:int64}) query;
    getCartCount: () -> (nat64) query;
    getCarts: () -> (vec record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; username:text; imageUrl:text}; imageUrl:text; genres:vec text; supply:int64; price:int64}) query;
    getGenreById: (principal) -> (opt record {id:principal; name:text}) query;
    getGenreCount: () -> (nat64) query;
    getGenres: () -> (vec record {id:principal; name:text}) query;
    getMusicByGenre: (text) -> (variant {Ok:record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; username:text; imageUrl:text}; imageUrl:text; genres:vec text; supply:int64; price:int64}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    getMusicById: (principal) -> (variant {Ok:record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; username:text; imageUrl:text}; imageUrl:text; genres:vec text; supply:int64; price:int64}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    getMusicByName: (text) -> (vec record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; username:text; imageUrl:text}; imageUrl:text; genres:vec text; supply:int64; price:int64}) query;
    getMusicByVolumeDesc: (record {limit:int64}) -> (variant {Ok:vec record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; username:text; imageUrl:text}; imageUrl:text; genres:vec text; supply:int64; price:int64}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    getMusicCount: () -> (nat64) query;
    getMusics: () -> (vec record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; username:text; imageUrl:text}; imageUrl:text; genres:vec text; supply:int64; price:int64}) query;
    getUserById: (principal) -> (variant {Ok:record {id:principal; username:text; imageUrl:text}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    getUserCount: () -> (nat64) query;
    getUsers: () -> (vec record {id:principal; username:text; password:text; imageUrl:text}) query;
    greet: (text) -> (text) query;
    login: (record {username:text; password:text}) -> (variant {Ok:record {id:principal; username:text; imageUrl:text}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    removeCart: (record {userId:principal; cartId:principal}) -> (variant {Ok:opt record {id:principal; userId:principal; quantity:int64; musicId:principal}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    removeCartQuantity: (record {userId:principal; cartId:principal}) -> (variant {Ok:opt record {id:principal; userId:principal; quantity:int64; musicId:principal}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; ParameterMissing:text; CredentialNotMatch:text; CartDoesNotExist:principal; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
}
