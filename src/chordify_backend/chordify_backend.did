service: () -> {
    checkout: (principal) -> (variant {Ok:record {id:principal; musics:vec record {id:principal; name:text; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; quantity:int64; price:int64; musicId:principal}; userId:principal}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    createCart: (principal, principal) -> (variant {Ok:record {id:principal; musics:vec record {id:principal; name:text; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; quantity:int64; price:int64; musicId:principal}}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    createGenre: (record {name:text}) -> (record {id:principal; name:text});
    createMusic: (record {authorId:principal; name:text; description:text; imageUrl:text; genres:vec text; supply:int64; price:int64; saleEnd:int64}) -> (record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; supply:int64; price:int64; saleEnd:int64});
    createUser: (record {username:text; password:text}) -> (record {id:principal; money:int64; username:text});
    getCartById: (principal) -> (opt record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; supply:int64; price:int64; saleEnd:int64}) query;
    getCartCount: () -> (nat64) query;
    getCarts: (principal) -> (variant {Ok:vec record {id:principal; name:text; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; quantity:int64; price:int64; musicId:principal}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    getGenreById: (principal) -> (opt record {id:principal; name:text}) query;
    getGenreCount: () -> (nat64) query;
    getGenres: () -> (vec record {id:principal; name:text}) query;
    getMusicByGenre: (text) -> (variant {Ok:record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; supply:int64; price:int64; saleEnd:int64}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    getMusicById: (principal) -> (opt record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; supply:int64; price:int64; saleEnd:int64}) query;
    getMusicByName: (text) -> (vec record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; supply:int64; price:int64; saleEnd:int64}) query;
    getMusicCount: () -> (nat64) query;
    getMusics: () -> (vec record {id:principal; name:text; description:text; volume:int64; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; supply:int64; price:int64; saleEnd:int64}) query;
    getUserById: (principal) -> (variant {Ok:record {id:principal; money:int64; username:text}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    getUserCount: () -> (nat64) query;
    getUsers: () -> (vec record {id:principal; money:int64; username:text; password:text}) query;
    greet: (text) -> (text) query;
    login: (record {username:text; password:text}) -> (variant {Ok:principal; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    removeCart: (principal, principal) -> (variant {Ok:text; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}}) query;
    topup: (principal, int64) -> (variant {Ok:record {id:principal; money:int64; username:text}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    updateCart: (principal, principal, int64) -> (variant {Ok:record {id:principal; musics:vec record {id:principal; name:text; author:record {id:principal; money:int64; username:text; password:text}; imageUrl:text; genres:vec text; quantity:int64; price:int64; musicId:principal}}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
    updateUsername: (principal, text) -> (variant {Ok:record {id:principal; money:int64; username:text}; Err:variant {MusicDoesNotExist:principal; InvalidMusicPrice:text; UsernameDoesNotExist:text; InvalidMusicName:text; NoGenre:text; CredentialNotMatch:text; UserDoesNotExist:principal; GenreDoesNotExist:principal}});
}
